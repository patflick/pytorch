CMAKE_MINIMUM_REQUIRED(VERSION 2.8 FATAL_ERROR)
CMAKE_POLICY(VERSION 2.8)

# HIP_PATH
IF(NOT DEFINED $ENV{HIP_PATH})
  SET(HIP_PATH /opt/rocm/hip)
ELSE()
  SET(HIP_PATH $ENV{HIP_PATH})
ENDIF()

# HCC_PATH
IF(NOT DEFINED $ENV{HCC_PATH})
  SET(HCC_PATH /opt/rocm/hcc)
ELSE()
  SET(HCC_PATH $ENV{HCC_PATH})
ENDIF()

# HIPBLAS_PATH
IF(NOT DEFINED $ENV{HIPBLAS_PATH})
  SET(HIPBLAS_PATH /opt/rocm/hcblas/)
ELSE()
  SET(HIPBLAS_PATH $ENV{HIPBLAS_PATH})
ENDIF()


SET(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake
                      ${CMAKE_MODULE_PATH}
                      "${HIP_PATH}/cmake")

EXECUTE_PROCESS(COMMAND ${HIP_PATH}/bin/hipconfig -P OUTPUT_VARIABLE PLATFORM)
EXECUTE_PROCESS(COMMAND ${HIP_PATH}/bin/hipconfig --cpp_config OUTPUT_VARIABLE HIP_CXX_FLAGS)
SET(HIP_CXX_FLAGS "-D__HIP_PLATFORM_HCC__  -I/opt/rocm/hip/include -I/opt/rocm/hcc/include")


IF(NOT Torch_FOUND)
  FIND_PACKAGE(Torch REQUIRED)
ENDIF()

FIND_PACKAGE(HIP 1.0 REQUIRED)

IF(${HIP_PLATFORM} STREQUAL "nvcc") # NVCC
  FIND_PACKAGE(CUDA 6.5 REQUIRED)
ELSE() # HCC
  SET(HIP_HIPCC_FLAGS "-DGENERIC_GRID_LAUNCH=1 ${HIP_HIPCC_FLAGS}")
  SET(CMAKE_CXX_COMPILER ${HIP_HIPCC_EXECUTABLE})
  SET(CMAKE_C_COMPILER ${HIP_HIPCC_EXECUTABLE})
  SET(CMAKE_C_FLAGS "-std=c99 -Werror=implicit-function-declaration ${CMAKE_C_FLAGS}")
  SET(CMAKE_C_FLAGS "${CMAKE_CXX_FLAGS} ${HIP_CXX_FLAGS}")
  SET(CMAKE_CXX_FLAGS  "-std=c++11 ${CMAKE_CXX_FLAGS} ${HIP_CXX_FLAGS}")
ENDIF()

# # TODO: temporary blunt implements.
IF (${PLATFORM} MATCHES "hcc")
  include_directories(${HCC_PATH}/include)
  include_directories(/home/patrick/cutorch_hip/external/bolt/include)
  include_directories(/home/patrick/cutorch_hip/external/boost)
ENDIF()

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
MESSAGE("TH include path: ${TH_INCLUDE_PATH}")
INCLUDE_DIRECTORIES(${TH_INCLUDE_PATH})
INCLUDE_DIRECTORIES(${TH_INCLUDE_PATH}/TH)
INCLUDE_DIRECTORIES(${TH_INCLUDE_PATH}/THC)

include_directories(${HIP_PATH}/include) 
MESSAGE( STATUS "HIP_CXX_FLAGS:         " ${HIP_CXX_FLAGS} )

IF(NOT TH_LIBRARIES)
  SET(TH_LIBRARIES "TH")
ENDIF(NOT TH_LIBRARIES)
MESSAGE(STATUS "TH_LIBRARIES: ${TH_LIBRARIES}")
IF(NOT THC_LIBRARIES)
  SET(THC_LIBRARIES "THC")
ENDIF(NOT THC_LIBRARIES)
MESSAGE(STATUS "THC_LIBRARIES: ${THC_LIBRARIES}")

#IF (${PLATFORM} MATCHES "nvcc")
#  IF(NOT CUDA_FOUND)
#    FIND_PACKAGE(CUDA 5.5 REQUIRED)
#  ENDIF()
#ENDIF() # PLATFORM MATCHES

IF(${PLATFORM} MATCHES "nvcc")
  MESSAGE(STATUS "got cuda version " ${CUDA_VERSION})

  #Â Detect CUDA architecture and get best NVCC flags
  IF(NOT COMMAND CUDA_SELECT_NVCC_ARCH_FLAGS)
    INCLUDE(${CMAKE_CURRENT_SOURCE_DIR}/cmake/select_compute_arch.cmake)
  ENDIF()
  
  CUDA_SELECT_NVCC_ARCH_FLAGS(NVCC_FLAGS_EXTRA $ENV{TORCH_CUDA_ARCH_LIST})
  LIST(APPEND CUDA_NVCC_FLAGS ${NVCC_FLAGS_EXTRA})
  
  if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER "4.9.3")
      if(CUDA_VERSION VERSION_LESS "8.0")
        MESSAGE(STATUS "Found gcc >=5 and CUDA <= 7.5, adding workaround C++ flags")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_FORCE_INLINES -D_MWAITXINTRIN_H_INCLUDED -D__STRICT_ANSI__")
      endif(CUDA_VERSION VERSION_LESS "8.0")
    endif(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER "4.9.3")
  endif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  
  MESSAGE(STATUS "CUDA_NVCC_FLAGS: ${CUDA_NVCC_FLAGS}")
ENDIF() #PLATFORM

IF(NOT THCUNN_INSTALL_LIB_SUBDIR)
  SET(THCUNN_INSTALL_LIB_SUBDIR "lib" CACHE PATH "THCUNN install library directory")
ENDIF()

FILE(GLOB src-cuda *.cu)

include_directories(${HIPBLAS_PATH}/include)

IF (${PLATFORM} MATCHES "hcc")
  set (CMAKE_MODULE_LINKER_FLAGS "-Wl,-Bsymbolic")
  MESSAGE(STATUS "including HIPBLAS headers" ${HIPBLAS_PATH})
ENDIF()

HIP_INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})
HIP_ADD_LIBRARY(THCUNN MODULE ${src-cuda})

TARGET_COMPILE_DEFINITIONS(THCUNN PUBLIC GENERIC_GRID_LAUNCH=1)


IF(${PLATFORM} STREQUAL "nvcc")
  TARGET_LINK_LIBRARIES(THCUNN THC TH ${CUDA_cusparse_LIBRARY})
ENDIF()

IF(${PLATFORM} STREQUAL "hcc")
  FIND_LIBRARY(HIPBLAS_LIBRARY hipblas_hcc HINTS ${HIPBLAS_PATH}/lib)
  #TARGET_LINK_LIBRARIES(THCUNN THC TH hip_hcc ${HIPBLAS_LIBRARY})
  TARGET_LINK_LIBRARIES(THCUNN THC TH ${HIPBLAS_LIBRARY})
ENDIF()

INSTALL(TARGETS THCUNN LIBRARY DESTINATION ${THCUNN_INSTALL_LIB_SUBDIR})
