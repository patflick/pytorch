#ifndef MTGP32_FAST_H
#define MTGP32_FAST_H
/**
 * @file mtgp32-fast.h
 *
 * @brief Mersenne Twister for Graphic Processors (mtgp32), which
 * generates 32-bit unsigned integers and single precision floating
 * point numbers based on IEEE 754 format.
 *
 * @author Mutsuo Saito (Hiroshima University)
 * @author Makoto Matsumoto (Hiroshima University)
 *
 * Copyright (C) 2009 Mutsuo Saito, Makoto Matsumoto and
 * Hiroshima University. All rights reserved.
 *
 * The new BSD License is applied to this software, see LICENSE.txt
 */
#include <string.h>
#include <assert.h>
#include <stdio.h>
#include <stdint.h>

#if defined(__cplusplus)
extern "C" {
#endif

/**
 * \struct MTGP32_PARAMS_FAST_T
 * MTGP32 parameters.
 * Some element is redundant to keep structure simple.
 *
 * pos is a pick up position which is selected to have good
 * performance on graphic processors. pos < Q, where Q is a maximum
 * number such thatthe size of status array - Q is a power of 2.
 * For example, when  mexp is 44497, size of 32-bit status array
 * is 696, and Q is 184, then pos is between 4 and 183. This means
 * 512 parallel calculations is allowed when mexp is 44497.
 *
 * poly_sha1 is SHA1 digest of the characteristic polynomial of
 * state transition function. SHA1 is calculated based on printing
 * form of the polynomial. This is important when we use parameters
 * generated by the dynamic creator which
 *
 * mask This is a mask to make the dimension of state space have
 * just Mersenne Prime. This is redundant.
 */
typedef struct MTGP32_PARAMS_FAST_T {
  int mexp;     /* Mersenne exponent. This is redundant. */
  int pos;      /* pick up position. */
  int sh1;      /* shift value 1. 0 < sh1 < 32. */
  int sh2;      /* shift value 2. 0 < sh2 < 32. */
  uint32_t tbl[16];         /* a small matrix. */
  uint32_t tmp_tbl[16];     /* a small matrix for tempering. */
  uint32_t flt_tmp_tbl[16]; /* a small matrix for tempering and converting to float. */
  uint32_t mask;            /* This is a mask for state space */
  unsigned char poly_sha1[21]; /**< SHA1 digest */
} mtgp32_params_fast_t;

/**
 * \struct MTGP32_STATUS_FAST_T
 * MTGP32 internal state array.
 * In this structure, we use larger_size and larger_mask to
 * avoid slow operation of remainder (%).
 *
 * size is the minimum needed size to represent linear space of
 * two element filed as 32-bit array.
 *
 * large_size is a minimum power of 2 which is larger than size.
 * array has this size.
 *
 * large_mask is a bit mask to update idx in a fast way.
 * idx is updated by `logical and' & with large_mask.
 */
typedef struct MTGP32_STATUS_FAST_T {
  int idx;          /* index */
  int size;         /* minimum needed size */
  int large_size;   /* real size of array */
  int large_mask;   /* bit mask to update idx */
  uint32_t array[]; /* internal state array */
} mtgp32_status_fast_t;

/*
 * struct MTGP32_STATUS_FAST_T
 * MTGP32 interface structure
 */
typedef struct MTGP32_FAST_T {
  mtgp32_params_fast_t params; /* parameters */
  mtgp32_status_fast_t *status; /* internal state */
} mtgp32_fast_t;

/*
 * parameter constants tables for MEXP=11213.
 * size - pos > 256.
 */
extern mtgp32_params_fast_t mtgp32_params_fast_11213[200];

/*
 * parameter constants tables for MEXP=23209.
 * size - pos > 512.
 */
extern mtgp32_params_fast_t mtgp32_params_fast_23209[128];

/*
 * parameter constants tables for MEXP=44497.
 * size - pos > 1024.
 */
extern mtgp32_params_fast_t mtgp32_params_fast_44497[128];

#if defined(__cplusplus)
}
#endif
#endif
